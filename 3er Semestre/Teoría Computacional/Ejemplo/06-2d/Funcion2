import java.awt.*;
import java.lang.Math;
import javax.swing.*;

public class Funcion extends JApplet
{										   
// AREA DE GRAFICACION DE LA PANTALLA
int xPantMax ,yPantMax ,xPantMin ,yPantMin ;

// AREA DE GRAFICACION DEL MUNDO REAL
double xRealMax ,yRealMax ,xRealMin ,yRealMin ;


  // MAPEA LAS COORDENADAS X REALES A PANTALLA PASANDO POR NORMALIZADAS 
  int mapeaX( double x_real)
  {
  double x_normal ;
  
    x_normal = ( x_real - xRealMin ) / ( xRealMax - xRealMin );
    return xPantMin + (int)(x_normal * ( xPantMax - xPantMin ));
  }


  //  MAPEA LAS COORDENADAS Y REALES A PANTALLA PASANDO POR NORMALIZADAS
  int mapeaY( double y_real )
  {
  double y_normal;
  int y_pantalla ;

    y_normal = ( y_real - yRealMin ) / ( yRealMax - yRealMin );
    y_pantalla = yPantMin + (int)(y_normal * ( yPantMax - yPantMin ));
    return 600 - y_pantalla; // yPantMax - y_pantalla;
    // resolución de la pantalla
  }

   void cuadrito(Graphics g, double xbase, double ybase, double ladox, double ladoy, Color color)
   {
        int xPunto[] = new int[4];
        int yPunto[] = new int[4];
        
        xPunto[0] = mapeaX(xbase);           yPunto[0] = mapeaY(ybase);
        xPunto[1] = mapeaX(xbase + ladox);   yPunto[1] = mapeaY(ybase);
        xPunto[2] = mapeaX(xbase + ladox);   yPunto[2] = mapeaY(ybase + ladoy);
        xPunto[3] = mapeaX(xbase);           yPunto[3] = mapeaY(ybase + ladoy);
      
        g.setColor(color);    
        g.fillPolygon(xPunto, yPunto, 4);
  
   }

  public void paint(Graphics g)
  {
  double x ,y ,incr ;


    xPantMin = 350;  xPantMax = 550;
    
    yPantMin = 300;   yPantMax = 400;

    // xRealMin = -6.28;  xRealMax = 6.28;
    // yRealMin = -1;  yRealMax = 1;


    xRealMin = 0;  xRealMax = 8;
    
    yRealMin = 0;  yRealMax = 3;
    

    g.setColor(Color.white);
    g.fillRect(0,0,800,600); 
    g.setColor(new Color(0,0,0));
    //g.drawLine(mapeaX(xRealMin), mapeaY(0) ,mapeaX(xRealMax), mapeaY(0));
    //g.drawLine(mapeaX(0), mapeaY(yRealMin) ,mapeaX(0), mapeaY(yRealMax));


double  ladox = 0 , ladoy = 0;

Color matriz[][] = new Color[100][100];

int r , c;

// Aqui se llena la matriz de intensidades 
    for(r = 0; r < 100; r++ )
        for( c = 0; c < 100; c++ )
        {
        	if( r < 41 )
        	{
        	    if( c < 41)
        	        matriz[r][c] = new Color(0,0,255);
        	    else
        	        if( c > 41 && c < 81 )
        	            matriz[r][c] = new Color(255,255,0);
        	        else
        	            matriz[r][c] = new Color(255,0,0);
        	}
        	        
        	if( r > 40 && r < 80 )
        	{
                if( c < 81)
        	            matriz[r][c] = new Color(255,255,0);
       	        else
        	            matriz[r][c] = new Color(255,0,0);
        		
        	}
        	if( r > 80 )
                 matriz[r][c] = new Color(255,0,0);
        }
        
    ladox = (xRealMax - xRealMin) / 100; // se divide entre 100 por el numero de cuadritos de la matriz
    ladoy = (yRealMax - yRealMin) / 100;
        
    r = 0; 
    for( y = yRealMin; y < yRealMax; y += ladoy )
    {
        c=0;
        for( x = xRealMin; x < xRealMax; x += ladox )
        {
            cuadrito(g, x, y, ladox, ladoy, matriz[r][c]);
            c++; 	
        }
        r++;
    }

/*
    incr = (xRealMax - xRealMin) / (xPantMax - xPantMin);
    for( x = xRealMin; x < xRealMax; x += incr )
    {
        // FUNCION GRAFICABLE 
        g.setColor(Color.blue);
        y = Math.cos(x);
        g.drawLine(mapeaX(x),mapeaY(y),mapeaX(x),mapeaY(y));

        g.setColor(Color.red);
        y = Math.sin(x);
        g.drawLine(mapeaX(x),mapeaY(y),mapeaX(x),mapeaY(y));
    }
*/    
   
  }
}
